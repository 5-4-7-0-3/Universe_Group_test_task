services:
  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: eventdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  nats:
    image: nats:2.10-alpine
    restart: unless-stopped
    command: ["-js", "-sd", "/data"]
    volumes:
      - nats_data:/data
    ports:
      - "4222:4222"
      - "8222:8222"
    healthcheck:
      test: ["CMD", "nats", "server", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application Services
  gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/eventdb
      NATS_URL: nats://nats:4222
      LOG_LEVEL: info
      # Increased body size limit
      BODY_SIZE_LIMIT: 50mb
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  fb-collector:
    build:
      context: .
      dockerfile: Dockerfile.fb-collector
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3002
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/eventdb
      NATS_URL: nats://nats:4222
      LOG_LEVEL: info
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
      gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  ttk-collector:
    build:
      context: .
      dockerfile: Dockerfile.ttk-collector
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3003
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/eventdb
      NATS_URL: nats://nats:4222
      LOG_LEVEL: info
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
      gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  reporter:
    build:
      context: .
      dockerfile: Dockerfile.reporter
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3004
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/eventdb
      LOG_LEVEL: info
    ports:
      - "3004:3004"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Publisher - starts after all services are healthy
  publisher:
    image: andriiuni/events:latest
    restart: unless-stopped
    environment:
      EVENT_ENDPOINT: http://gateway:3001/events
      # Optional: Add batch size configuration if supported
      BATCH_SIZE: 1000
    depends_on:
      gateway:
        condition: service_healthy
      fb-collector:
        condition: service_healthy
      ttk-collector:
        condition: service_healthy

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - gateway
      - fb-collector
      - ttk-collector
      - reporter

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

volumes:
  postgres_data:
  nats_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: event-processing-network